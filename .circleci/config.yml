# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.1-node-browsers

      - image: circleci/mysql:8.0-ram
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_DATABASE: registration
          MYSQL_USER: user
          MYSQL_PASSWORD: user

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "a4:71:57:c1:5b:21:1b:00:08:0e:a0:00:9e:42:d5:78"

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip pdo_mysql

      - run:
          name: Start ssh-keyscan  
          command: |  
            ssh-keyscan ${SSH_HOST} >> ~/.ssh/known_hosts && cat ~/.ssh/known_hosts

      # Download and cache dependencies
      #- restore_cache:
      #    keys:
      #      # "composer.lock" can be used if it is committed to the repo
      #      - v1-dependencies-{{ checksum "composer.json" }}
      #      # fallback to using the latest cache if no exact match is found
      #      - v1-dependencies-

      #- run: composer install -n --prefer-dist

      #- save_cache:
      #    key: v1-dependencies-{{ checksum "composer.json" }}
      #    paths:
      #      - ./vendor
      #- restore_cache:
      #    keys:
      #      - node-v1-{{ checksum "package.json" }}
      #      - node-v1-
      #- run: yarn install
      #- save_cache:
      #    key: node-v1-{{ checksum "package.json" }}
      #    paths:
      #      - node_modules

      # prepare the database
      #- run: touch storage/testing.sqlite
      #- run: php artisan migrate --env=testing --database=sqlite_testing --force

      # run tests with phpunit or codecept
      #- run: ./vendor/bin/phpunit
      #- run: ./vendor/bin/codecept build
      #- run: ./vendor/bin/codecept run

  deploy:
    machine:
      enabled: true
    steps:
      - add_ssh_keys:
          fingerprints:
            - "a4:71:57:c1:5b:21:1b:00:08:0e:a0:00:9e:42:d5:78"

      - run:
          name: Start ssh-keyscan
          command: |
            ssh-keyscan ${SSH_HOST} >> ~/.ssh/known_hosts && cat ~/.ssh/known_hosts

      - run:
          name: Deployment by ssh
          command: |
            ssh $SSH_USER@$SSH_HOST "cd ~/workspaces/ais/soft806/$CIRCLE_PROJECT_REPONAME && git pull origin $CIRCLE_BRANCH"

workflows:
  version: 2
  build-and-deploy:
    jobs:

      - build
      - deploy:
          requires:
            - build
          #filters:
          #  branches:
          #    only: master
